import java.sql.*;

public class DataMigration {

    public static void executeDataMigration(int regRefDefId) {
        String url = "jdbc:db2://your-db-url:50000/yourDB";
        String user = "yourUsername";
        String password = "yourPassword";

        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            conn = DriverManager.getConnection(url, user, password);
            conn.setAutoCommit(false);

            int logSeq = 1001;
            int batchSize = 50000;
            boolean batchEnabled = true;
            int insertCnt = 0;
            long refListAuditId = 0;

            String errorMessage;

            // Log the start of the migration
            stmt = conn.prepareStatement("INSERT INTO REF_LIST.MIGRATION_LOG (ID, SEQ, IN_Z, MESSAGE) VALUES (?, ?, CURRENT_TIMESTAMP, ?)");
            stmt.setInt(1, regRefDefId);
            stmt.setInt(2, logSeq++);
            stmt.setString(3, "Migration Started");
            stmt.executeUpdate();

            // Get the next audit ID
            stmt = conn.prepareStatement("SELECT NEXT_VALUE FROM REF_LIST.REF_LIST_SEQUENCE WHERE NAME = 'AuditSequence'");
            rs = stmt.executeQuery();
            if (rs.next()) {
                refListAuditId = rs.getLong(1);
            }

            // Main data cursor logic
            stmt = conn.prepareStatement("SELECT RD.IN_TMSTMP, RD.OUT_TMSTMP, RD.ENTRY_ID, RD.RRD_DEF_ID, RD.ENTRY_DESC, RD.ATTR_VAL_1, RD.ATTR_VAL_2, " +
                    "RD.OVERRIDE_IND, RD.KERBEROS_ID, RD.EFF_TMSTMP, RD.EXP_TMSTMP, RD.ATTR_VAL_3, RD.ATTR_VAL_4, RD.ATTR_VAL_5, RD.ATTR_VAL_6, " +
                    "RD.ATTR_VAL_7, RD.ATTR_VAL_8, RD.ATTR_VAL_9, RD.ATTR_VAL_10, WF.IN_TMSTMP, WF.TASK_TYPE, WF.MAKER_KERBEROS, WF.CHECKER_KERBEROS, " +
                    "WF.MAKER_COMMENTS, WF.CHECKER_COMMENTS, WF.BUSINESS_REASON FROM RAMP.REGREF_DATA RD " +
                    "LEFT OUTER JOIN (SELECT RDW.ENTRY_ID, RW.IN_TMSTMP, RDW.TASK_TYPE, RW.MAKER_KERBEROS, RW.CHECKER_KERBEROS, RW.MAKER_COMMENTS, " +
                    "RW.CHECKER_COMMENTS, RW.BUSINESS_REASON FROM RAMP.REGREF_WORKFLOW_ENTRY RDW, RAMP.REGREF_WORKFLOW RW WHERE RDW.WORKFLOW_ID = RW.WORKFLOW_ID " +
                    "AND RDW.OUT_TMSTMP > CURRENT_TIMESTAMP AND RW.OUT_TMSTMP > CURRENT_TIMESTAMP) WF ON RD.ENTRY_ID = WF.ENTRY_ID AND " +
                    "SUBSTR(RD.IN_TMSTMP, 1, 16) = SUBSTR(WF.IN_TMSTMP, 1, 16) WHERE RD.RRD_DEF_ID = ? ORDER BY RD.IN_TMSTMP FOR FETCH ONLY");
            stmt.setInt(1, regRefDefId);

            rs = stmt.executeQuery();

            while (rs.next()) {
                long referenceListEntryId = 0;

                Timestamp dataCursorExpTimestamp = rs.getTimestamp("EXP_TMSTMP");
                Timestamp dataCursorDataOutTimestamp = rs.getTimestamp("OUT_TMSTMP");
                if (dataCursorExpTimestamp != null && dataCursorExpTimestamp.toLocalDateTime().getYear() == 9999) {
                    dataCursorExpTimestamp = Timestamp.valueOf("9999-12-01 00:00:00");
                }
                if (dataCursorDataOutTimestamp != null && dataCursorDataOutTimestamp.toLocalDateTime().getYear() == 9999) {
                    dataCursorDataOutTimestamp = Timestamp.valueOf("9999-12-01 00:00:00");
                }

                // Insert into REFERENCE_LIST_ENTRY if not exists
                PreparedStatement checkEntryStmt = conn.prepareStatement("SELECT ENTRY_ID FROM REF_LIST.REFERENCE_LIST_ENTRY WHERE ENTRY_ID = ? AND OUT_Z = ?");
                checkEntryStmt.setLong(1, rs.getLong("ENTRY_ID"));
                checkEntryStmt.setTimestamp(2, dataCursorDataOutTimestamp);
                ResultSet entryCheckRs = checkEntryStmt.executeQuery();

                if (!entryCheckRs.next()) {
                    PreparedStatement insertEntryStmt = conn.prepareStatement("INSERT INTO REF_LIST.REFERENCE_LIST_ENTRY (REF_LIST_ID, ENTRY_ID, AUDIT_ID, EFFECTIVE_FROM, EFFECTIVE_TO, IN_Z, OUT_Z) " +
                            "VALUES (?, ?, ?, ?, ?, ?, ?)");
                    insertEntryStmt.setInt(1, regRefDefId);
                    insertEntryStmt.setLong(2, rs.getLong("ENTRY_ID"));
                    insertEntryStmt.setLong(3, refListAuditId);
                    insertEntryStmt.setTimestamp(4, rs.getTimestamp("EFF_TMSTMP"));
                    insertEntryStmt.setTimestamp(5, dataCursorExpTimestamp);
                    insertEntryStmt.setTimestamp(6, rs.getTimestamp("IN_TMSTMP"));
                    insertEntryStmt.setTimestamp(7, dataCursorDataOutTimestamp);
                    insertEntryStmt.executeUpdate();

                    // Insert into REFERENCE_LIST_VALUES
                    PreparedStatement insertValueStmt = conn.prepareStatement("INSERT INTO REF_LIST.REFERENCE_LIST_VALUE (ENTRY_ID, AUDIT_ID, ATTRIBUTE_NAME, ATTRIBUTE_VALUE, IN_Z, OUT_Z) " +
                            "VALUES (?, ?, ?, ?, ?, ?)");
                    insertValueStmt.setLong(1, rs.getLong("ENTRY_ID"));
                    insertValueStmt.setLong(2, refListAuditId);
                    insertValueStmt.setString(3, "entryDescription");
                    insertValueStmt.setString(4, rs.getString("ENTRY_DESC"));
                    insertValueStmt.setTimestamp(5, rs.getTimestamp("IN_TMSTMP"));
                    insertValueStmt.setTimestamp(6, dataCursorDataOutTimestamp);
                    insertValueStmt.executeUpdate();
                }

                refListAuditId++;
                insertCnt++;

                // Batch commit
                if (insertCnt % batchSize == 0 && batchEnabled) {
                    stmt = conn.prepareStatement("INSERT INTO REF_LIST.MIGRATION_LOG (ID, SEQ, IN_Z, MESSAGE) VALUES (?, ?, CURRENT_TIMESTAMP, ?)");
                    stmt.setInt(1, regRefDefId);
                    stmt.setInt(2, logSeq++);
                    stmt.setString(3, "Incremental Update, inserted " + insertCnt + " rows");
                    stmt.executeUpdate();
                    conn.commit();
                }
            }

            // Final log
            stmt = conn.prepareStatement("INSERT INTO REF_LIST.MIGRATION_LOG (ID, SEQ, IN_Z, MESSAGE) VALUES (?, ?, CURRENT_TIMESTAMP, ?)");
            stmt.setInt(1, regRefDefId);
            stmt.setInt(2, logSeq);
            stmt.setString(3, "Migration Completed, inserted " + insertCnt + " rows");
            stmt.executeUpdate();

            conn.commit();

        } catch (SQLException e) {
            e.printStackTrace();
            try {
                if (conn != null) {
                    conn.rollback();
                }
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException closeEx) {
                closeEx.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        executeDataMigration(12345); // Replace with actual REG_REF_DEF_ID
    }
}
